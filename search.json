[{"path":"/CHANGELOG.html","id":"extendr-devel","dir":"","previous_headings":"","what":"extendr devel","title":"Changelog","text":"Fixed Clippy warnings Fixed “myvar” test failures - related base_env() “local” enviroment tests. Fixes builds ARM PPC platforms. Converted R! procedural macro, allowing parameters. Converted pairlist! procedural macro. Refactor extendr_macros. Remove unused lazy_static Continued improvments wrappers specific R types environments, functions symbols. Install system dependencies Linux. Use Use failure() trigger steps failures SymPair::sym_pair() now returns (Option<Robj>, Robj)","code":""},{"path":"/CHANGELOG.html","id":"extendr-020","dir":"","previous_headings":"","what":"extendr 0.2.0","title":"Changelog","text":"Added contributing guidelines code conduct. Made use ndarray optional. Made #[extendr] calls panic thread safe. Added NA handling #[extendr] macro. Added separate extendr-engine crate needed calling R Rust. Wrapper classes pairlists, environment, raw, symbols others. iterator support. Operators index, slice, dollar, double_colon, +, -, * /`. Debug printing support expanded use wrappers. Conversion Robj wrapper types. Multithreaded support - allows multithreaded testing using recursive spinlock. Bool type extended implemented using TRUE, FALSE NA_BOOLEAN. Optional parameters support NA handing. Errors thrown input parameters without Option NA. Harmonising function names integer, real, logical, symbol, raw, list, pairlist env. Refactored robj code several source files. Many functions updated use generic types. R! macro executing R source code. call! macro call R code. sym! macro generate symbols. Simplification vector generation using collect_robj ToVectorValue. Added array types [1, 2, 3] Robj::targets. Macros now mostly return errors.","code":""},{"path":"/CHANGELOG.html","id":"extendr-0110","dir":"","previous_headings":"","what":"extendr 0.1.10","title":"Changelog","text":"Fix build Windows MacOS.","code":""},{"path":"/CONTRIBUTING.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"welcome contributions extendr project. Contributions come many forms. Please carefully read follow guidelines. help us make contribution process easy effective everyone involved. also communicates agree respect time developers managing developing project.","code":""},{"path":"/CONTRIBUTING.html","id":"quicklinks","dir":"","previous_headings":"","what":"Quicklinks","title":"Contributing","text":"Code Conduct Issues Pull Requests Getting Help Authorship Attribution","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"take open source community seriously hold contributors high standards communication. participating contributing project, agree uphold Code Conduct.","code":""},{"path":"/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Contributing","text":"Contributions can made via Issues Pull Requests (PRs). general guidelines cover : Please search existing Issues PRs creating . work hard makes sure issues handled timely manner , depending problem maintainer availability, take investigate problem. friendly ping comment thread can help draw attention issue received attention . Please keep mind contributors project volunteers may commitments need attend .","code":""},{"path":"/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"Getting Started","what":"Issues","title":"Contributing","text":"Issues used report problems library, request new feature, discuss potential changes PR created. Please use Issues request user support. Whenever possible, please provide minimal reproducible example (reprex) bug report filing. minimal example, likely somebody else can figure problem , please remove code isn’t relevant problem reporting. Please keep issues focused one particular problem. Don’t feel shy opening multiple issues ’re encountering one problem. find Issue addresses problem ’re , please add reproduction information existing issue rather creating new one. Adding reaction can also help indicating maintainers particular problem affecting just reporter.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"Getting Started","what":"Pull Requests","title":"Contributing","text":"PRs always welcome can quick way get fix improvement slated next release. However, please always open Issue submitting PR. general, PRs : Address single concern least number changed lines possible. fix/add functionality question address wide-spread whitespace/style issues, . Add unit integration tests fixed changed functionality. Include documentation. Indicate Issue address using words Closes #<issue number> Fixes #<issue number> body PR /git commit message. (See GitHub Documentation details linking PRs Issues automatically closing Issues merging PRs.) general, follow GitHub flow development model: Fork repository Github account Clone project machine Create branch locally succinct descriptive name Commit changes branch Push changes fork Open PR repository follow PR template can efficiently review changes.","code":""},{"path":"/CONTRIBUTING.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Contributing","text":"Please join us Discord server general conversations questions don’t belong GitHub issue.","code":""},{"path":"/CONTRIBUTING.html","id":"authorship","dir":"","previous_headings":"","what":"Authorship","title":"Contributing","text":"Contributors made multiple, sustained, /non-trivial contributions project may added author list. New author names always added end list, author order reflects chronological order joining project. authorship decisions discretion current maintainers project.","code":""},{"path":"/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing","text":"document adapted General Contributing Guidelines auth0 project.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors","text":"Andy Thomason. Author, maintainer. Mossa M. Reimert. Author. Claus O. Wilke. Author. Hiroaki Yutani. Author. Ilia Kosenkov. Author. Daniel Falbel. Author. Genomics Plc. Copyright holder.","code":""},{"path":"/index.html","id":"extendr---a-safe-and-user-friendly-r-extension-interface-using-rust","dir":"","previous_headings":"","what":"Extendr: A safe and user friendly R extension interface using Rust.\n","title":"Extendr: A safe and user friendly R extension interface using Rust.\n","text":"Extendr Rust extension mechanism R following code illustrates simple structure trait written Rust. data defined struct declaration methods impl. Extendr consists following projects: extendr-api - core Extendr crate providing functionality; extendr-macros - Extendr crate responsbile Rust wrapper generation; extendr-engine - crate enables launching R sessions Rust code; rextendr - R package helps scaffolding extendr-enabled packages compiling Rust code dynamically; libR-sys - provides auto-generated R bindings Rust. #[extendr] attribute causes compiler generate wrapper registration functions R called package loaded. R’s side, users can access Rust functions follows: extendr_module! macro lists module name exported functions interfaces. library aims provide interface familiar first-time users Rust indeed compiled language. Anyone knows R library able write R extensions.","code":"use extendr_api::prelude::*;  struct Person {     pub name: String, }  #[extendr] impl Person {     fn new() -> Self {         Self { name: \"\".to_string() }     }      fn set_name(&mut self, name: &str) {         self.name = name.to_string();     }      fn name(&self) -> &str {         self.name.as_str()     } }  #[extendr] fn aux_func() { }   // Macro to generate exports extendr_module! {     mod classes;     impl Person;     fn aux_func; } # call function aux_func()  # create Person object p <- Person$new() p$set_name(\"foo\") p$name()   # \"foo\" is returned"},{"path":"/index.html","id":"wrappers-for-r-types","dir":"","previous_headings":"","what":"Wrappers for R types","title":"Extendr: A safe and user friendly R extension interface using Rust.\n","text":"Extendr provides number wrappers R types. fall three categories, scalar types single integer, vector types array scalar type linked list types used represent R code call arguments.","code":""},{"path":"/index.html","id":"returning-lists-and-strings","dir":"","previous_headings":"Examples","what":"Returning lists and strings","title":"Extendr: A safe and user friendly R extension interface using Rust.\n","text":"Lists strings rust vectors R objects. represented wrappers List Strings. List contains slice Robj wrappers can contain R object. Strings contains slice Rstr wrappers can contain single string. examples show return list string R Rust.","code":"use extendr_api::wrapper::{List, Strings}; use extendr_api::list;  fn get_strings() -> Strings {     Strings::from_values(         (0..10)         .map(|i| format!(\"number {}\", i))     ) }  fn get_named_list() -> List {     list!(x=1, y=\"xyz\", z=()) }  fn get_unnamed_list() -> List {     List::from_values(0..10) }"},{"path":"/index.html","id":"returning-scalars","dir":"","previous_headings":"Examples","what":"Returning scalars","title":"Extendr: A safe and user friendly R extension interface using Rust.\n","text":"Whilst can use i32 f64 Extendr return values. better way use Rint Rfloat wrappers provide access NA value used R represent missing data.","code":"use extendr_api::scalar::{Rint, Rfloat};  // for .na() use extendr_api::CanBeNA;  fn get_int() -> Rint {     Rint::from(1) }  fn get_na_int() -> Rint {     Rint::na() }  fn get_float() -> Rfloat {     Rfloat::from(1.0) }  fn get_na_float() -> Rfloat {     Rfloat::na() }"},{"path":"/index.html","id":"plotting-a-png-file-from-rust","dir":"","previous_headings":"Examples","what":"Plotting a PNG file from Rust","title":"Extendr: A safe and user friendly R extension interface using Rust.\n","text":"can use Extendr take advantage stats plotting functions R. example, make web server returns plots incoming data.","code":"use extendr_api::{test, Result, eval_string, eval_string_with_params}; use extendr_api::{Doubles, R};  fn main() {     test!{         let x = Doubles::from_values((0..100).map(|i| i as f64 / 20.0));          // let y = Doubles::from_values(x.iter().map(|x| x.inner().sin()));         let y = Doubles::from_values((0..100).map(|i| (i as f64 / 20.0).sin()));          // Set a PNG device         R!(r#\"png(\"/tmp/sin_plot.png\")\"#)?;          // Plot x and y         R!(\"plot({{&x}}, {{&y}})\")?;          // Linear model.         R!(\"abline(lm({{y}} ~ {{x}}))\")?;          // Flush the device to the image.         R!(\"dev.off()\")?;     } }"},{"path":"/started.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Getting started","text":"Extendr available crates.io. Simply add line [dependencies] section rust crate’s Cargo.toml. able call R code Rust.","code":"[dependencies] extendr-api = \"0.6\""},{"path":"/started.html","id":"installation---r","dir":"","previous_headings":"","what":"Installation - R","title":"Getting started","text":"two ways can use extendr API R. First, can use rextendr package call individual Rust functions R session. Second, can write R package uses compiled Rust code, see helloextendr repo minimal example.","code":""}]
