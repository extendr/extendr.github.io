[
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "What can I use extendr for?\n\n\nHow do I install extendr?\n\n\nWho are the developers of extendr?\nAuthors and maintainers include:\n\nAmy Thomason (author and creator, @andy-thomason)\nMossa M. Reimert (author and maintainer, @CGMossa)\nClaus O. Wilke (author, @clauswilke)\nHoroaki Yutani (author, @yutannihilation)\nIlia Kosenkov (author and maintainer, @Ilia-Kosenkov)\nDaniel Falbel (author, @dfalbel)\nJosiah Parry (maintainer, @JosiahParry)"
  },
  {
    "objectID": "get-started.html",
    "href": "get-started.html",
    "title": "Get Started",
    "section": "",
    "text": "To build R packages with extendr, you need to have the right tools."
  },
  {
    "objectID": "get-started.html#step-1-install-rust",
    "href": "get-started.html#step-1-install-rust",
    "title": "Get Started",
    "section": "Step 1 Install Rust",
    "text": "Step 1 Install Rust\n\n\n\n\nFollow the rustup installation instructions to install Rust. Note that the current minimum supported Rust version (msrv) in extendr is 1.64. This is to ensure CRAN compliance."
  },
  {
    "objectID": "get-started.html#step-2-update-r",
    "href": "get-started.html#step-2-update-r",
    "title": "Get Started",
    "section": "Step 2 Update R",
    "text": "Step 2 Update R\n\n\n\n\nWe recommend using a moderately new version of R (&gt;= 4.2.0). You can get that from CRAN."
  },
  {
    "objectID": "get-started.html#step-3-install-rextendr",
    "href": "get-started.html#step-3-install-rextendr",
    "title": "Get Started",
    "section": "Step 3 Install rextendr",
    "text": "Step 3 Install rextendr\n\n\n\n\nThe R package {rextendr} provides scaffolding for extendr projects and tools for documenting Rust functions and objects. To install the latest development version, use pak::pak(\"extendr/rextendr\"). Note that rextendr provides a function to check your Rust installation: rextendr::rust_sitrep()."
  },
  {
    "objectID": "get-started.html#step-4-use-rust-analyzer",
    "href": "get-started.html#step-4-use-rust-analyzer",
    "title": "Get Started",
    "section": "Step 4 Use rust-analyzer",
    "text": "Step 4 Use rust-analyzer\nThis is optional, but strongly recommended. If you use Visual Studio Code (VS Code) or a similar IDE, the rust-analyzer will provide you type hinting and auto-completion suggestions. It is very helpful!"
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Arguments can be (mutable) typed slices such as &[Rbool], &mut [Rint] etc. [#790]\nNew optional faer feature which enables conversion between faer matrix and RMatrix&lt;f64&gt; [#706]\nAdds TryFrom&lt;Robj&gt; and &lt;TryFrom&lt;&Robj&gt; for impl blocks marked with #[extendr] macro allowing falliable conversion to &Self &mut Self\nAdds From&lt;T&gt; for Robj for impl blocks marked with #[extendr] macro\nThe new ExpectedExternalNonNullPtr error variant provides a more informative error when a null pointer is accessed\nRArray::data_mut provides a mutable slice to the underlying array data [#657]\nImplements the Attributes trait for all R vector wrapper structs (e.g. Integers , Doubles, Strings, etc.), allowing for easy access and setting of the attributes of an R object [#745]. This comes with breaking changes. See below.\nfeature non-api that gives access to non-API items; Requires compile-time generation of bindings [#754]\nTryFrom&lt;&Robj&gt; for StrIter, HashMap&lt;K, Robj&gt; for K = String and K = &str [#759]\n\n\n\n\n\nvector [#657]\n#[extendr(use_try_from = true) is now the default setting, therefore the option use_try_from has been removed [#759]\n\n\n\n\nR-devel Non-API changes:\n\nR’s C API is being formalized. While the changes are formalized, non-API functions are hidden behind a feature flag to prevent removal from CRAN.\nNon-API changes are in flux in R-devel, however, CRAN has set a July 9th date to remove any package that uses non-API functions. This includes almost every extendr based package on CRAN.\nSee [Rd] clarifying and adjusting the C API for R\nnonAPI.txt functions are hidden behind the non-api feature flag.\nRemoved from default include (but may not be limited to):\n\nglobal_var(), local_var(), base_env(), various Environment, Function, Primitive, and Promise methods.\n\n\nAttributes trait now returns a mutable reference to Self. [#745]. Previously .set_attrib() would modify an object in place, and then return an untyped owned pointer (Robj). Instead, now we return &mut Self.\nIn AltRep the unserialize_ex, set_parent, set_envflags are now hidden behind the feature flag non-api. Also, Promise::from_parts is marked as non-API.\nFloating point numbers with decimal part can no longer be converted to integer types via rounding [#757]\nYou can no longer create an Robj from a reference &T, where T is an extendr-impl. [#759]\nYou can no longer use from_robj, as the trait FromRobj as been removed. Instead, use try_from.\nIt is no longer possible to access an R integer vector as a &[u32] [#767]\n\n\n\n\n\n\nreturning &Self or &mut Self from a method in an #[extendr]-impl would result in unintended cloning [#614]\nTryFrom&lt;&Robj&gt; and FromRobj for integer scalars now correctly handles conversions from f64 [#757]\n\n\n\n\n\n\n\n\nALTLIST support allowing users to represent structs as R list objects\n[either] TryFrom&lt;&Robj&gt; for Either&lt;T, R&gt; and From&lt;Either&lt;T, R&gt;&gt; for Robj if T and R are themselves implement these traits. This unblocks scenarios like accepting any numeric vector from R via Either&lt;Integers, Doubles&gt; without extra memory allocation [#480]\nPartialOrd trait implementation for Rfloat, Rint and Rbool. Rfloat and Rint gained min() and max() methods [#573]\nuse_rng option for the extendr attribute macro, which enables the use of random number sampling methods from R, e.g. #[extendr(use_rng = true) [#476]\n[T; N] conversions to Robj [#594]\nToVectorValue for Rfloat, Rint and Rbool [#593]\nTryFrom&lt;_&gt; on Vec&lt;_&gt; for Integers (i32), Complexes (c64), Doubles (f64), and Logicals (bool / i32). [#593]\nRstr can now be constructed from Option&lt;String&gt; [#630]\n\n\n\n\n\nYou can now create ArrayView1 from &Robj as well as Robj [#501]\nRaw literals from Rust can be used for function and argument names. e.g. fn r#type() in Rust is converted to type() in R. [#531]\nFix memory leaks on errors and panics [#555]\nFixed error when collecting too many objects into List, etc. [#540]\n\n\n\n\n\n\n\n\nSupport for setting the default value of arguments to struct methods, using #[default = \"...\"] [#436]\n[ndarray] TryFrom&lt;&Robj&gt; for ArrayView1&lt;T&gt; and ArrayView2&lt;T&gt;, where T is i32, f64, c64, Rint, Rfloat, Rcplx, Rstr, Rbool [#443]\nDebug trait implementation for Rcplx and Complexes [#444]\nTryFrom&lt;Robj&gt;, From&lt;Option&lt;T&gt;&gt;, Into&lt;Option&lt;T&gt;&gt; and their variations for Nullable&lt;T&gt; [#446]\nNullable&lt;T&gt;::map() that acts on not null value and propagates NULL [#446]\n[ndarray] Conversion from owned arrays (ie ndarray::Array) into Robj [#450]\n[ndarray][docs] Documentation for the robj_ndarray module [#450]\nSum for scalars like Rint, Rfloat and Rcplx, which accept Iterator&lt;Item = &Rtype&gt; [#454]\nA new collect_rarray method that can be used to collect arbitrary iterables into an R matrix [#466]\n[docs] Documentation for RArray::new_matrix() [#466]\n\n\n\n\n\n[docs] Use bindgen on docs.rs, to ensure newer R features will still be documented [#426]\nUnify the tagging mechanism used to identify Rust types inside ExternalPtr. This allows #[extendr]-annotated functions to directly accept ExternalPtr&lt;MyStruct&gt; as well as MyStruct [#433]\nNullable&lt;T&gt; is now part of extendr_api::prelude [#446]\nBump the Rust edition from 2018 to 2021 [#458]\nWhen converted to STRSXP, strings are now correctly marked as UTF-8 even on non-UTF-8 platforms (i.e., R &lt; 4.2 on Windows), which shouldn’t matter for most of the users [#467]\n\n\n\n\n\nThe R CMD check note “Found non-API calls to R” by moving use extendr_engine; inside test! macro [#424]\nThe clippy lint “this public function might dereference a raw pointer but is not marked unsafe” [#451]\nA bug where importing a submodule via use some_module; inside the extendr_module! macro wasn’t working [#469]\n\n\n\n\n\n\n\n\nFunction type that wraps an R function, which can be invoked using the call() method. [#188]\npairlist! macro for generating Pairlist objects, e.g. for use in function calls. [#202]\nuse_try_from option for the extendr macro, which allows the use of any type that implements TryInto&lt;Robj&gt;/TryFrom&lt;Robj&gt;, e.g. #[extendr(use_try_from = true)]. [#222]\nSupport for R version 4.2. [#235]\ncall! macro, which can be used to call an R function whose name is provided as a string. [#238]\nLarge Rust integer types (u32, u64 and i64) can now be converted to R’s numeric type, which can handle large integer values. [#242]\nTryFrom&lt;Robj&gt; for a large number of Rust types. [#249], [#258]\nSupport for ALTREP. [#250], [#274]\nS4 struct, which wraps an S4 class in R. [#268]\n[ndarray] Implemented TryFrom&lt;&ArrayBase&gt; for Robj, allowing extendr-annotated functions to return Arrays from the ndarray crate and have them automatically converted to R arrays. [#275]\nRint, Rdouble, Rbool and Rcplx: NA-aware wrappers for scalar elements of R vectors [#274], [#284], [#301], [#338], [#350]\nIntegers, Doubles, Strings, Logicals and Complexes: wrappers for R vectors that deref to slices of the above types (RInt etc). [#274], [#284], [#301], [#338], [#350]\nExternalPtr, a wrapper class for creating R objects containing any Rust object. [#260]\n[graphics] Support for R graphics and graphics devices. The graphics feature flag is disabled by default. [#279], [#360], [#373], [#379], [#380], [#389]\nDeref implementation for vector types (Rint/Rfloat/Rbool/Rstr/Robj) to appropriately typed Rust slices. [#327]\ndefault option for extendr-annotated functions, allowing them to have default values, e.g. fn fred(#[default=\"NULL\"] x: Option&lt;i32&gt;) { }. [#334]\nr_name option for extendr-annotated functions, allowing the generated R function to have a different name. e.g.\n#[extendr(\n    use_try_from = true,\n    r_name = \"test.rename.rlike\",\n    mod_name = \"test_rename_mymod\"\n)]\nfn test_rename() { }\n[#335]\nserde::Serialize implementation for R types. [#305], [#355]\nRany type and the as_any conversion method. [#320]\nstd::fmt::Debug implementation for wrapper types. [#345]\n#[derive(TryFromRobj) and #[derive(IntoRobj)] which provide an automatic conversion from and to any custom Rust struct and Robj [#347]\n[[ operator that works with Rust classes. Its behavior is identical to that of the $ operator. [#359]\nLoad and Save, traits that, once implemented, provide the ability to load and save R data in the RDS format. These traits are implemented for all Robj. [#363]\nDataframe wrapper struct. [#393]\nIntoDataFrame trait, which can be derived to allow arbitrary Rust structs to be converted to rows of a data frame. [#393]\n\n\n\n\n\nStrings::elt now returns an Rstr. [#345]\nRenamed RType to Rtype. [#345]\nWrapper types now contain Robj fields. [#190]\nThe R! macro now accepts strings that contain R code. This is now the recommended way of using the macro, especially with raw strings e.g.\nR!(r#\"\n    print(\"hello\")\n\"#);\n[#203]\nImproved error handling for &lt;&str&gt;::try_from(Robj). [#226]\nSymPair::sym_pair() now returns (Option&lt;Robj&gt;, Robj). [#225]\nMore detailed error messages when converting Rust integer types to R. [#243]\nCharacter is now called Rstr. [#273]\n[ndarray] Bumped ndarray to 0.15.3. Under RFC 1977 this is a “public dependency” change, and therefore can be considered a breaking change, as consumers of extendr that use an older version of ndarray will no longer be compatible until they also bump ndarray to a compatible version. [#275]\nIsNA trait has been renamed to CanBeNA. [#288]\nlist! has been rewritten, and now returns a List struct. [#303]\n\n\n\n\n\nCalling the R! macro with non-string types (e.g. R!(1)) is now deprecated. [#203]\n\n\n\n\n\nReal, Int, Bool and the redundant trait SliceIter, which should be replaced with Rdouble, Rint, and Rbool respectively. [#304], [#338]\nTryFrom conversions between Robj and HashMap for consistency. List::into_hashmap() and List::from_hashmap() should be used instead. [#254]\n\n\n\n\n\n\nAdded contributing guidelines and code of conduct.\nMade use of ndarray optional.\nMade #[extendr] calls panic and thread safe.\nAdded NA handling to the #[extendr] macro.\nAdded a separate extendr-engine crate that is needed when calling R from Rust.\nWrapper classes for pairlists, environment, raw, symbols and others.\nMore iterator support.\nOperators index, slice, dollar, double_colon, +, -, * and /`.\nDebug printing support expanded to use wrappers.\nConversion of Robj to wrapper types.\nMultithreaded support - allows multithreaded testing using a recursive spinlock.\nBool type extended and implemented using TRUE, FALSE and NA_BOOLEAN.\nOptional parameters to support NA handing.\nErrors thrown if input parameters without Option are NA.\nHarmonising of function names into integer, real, logical, symbol, raw, list, pairlist and env.\nRefactored robj code into several source files.\nMany functions updated to use generic types.\nR! macro for executing R source code.\ncall! macro to call R code.\nsym! macro to generate symbols.\nSimplification of vector generation using collect_robj and ToVectorValue.\nAdded array types [1, 2, 3] as Robj::from targets.\nMacros now mostly return errors.\n\n\n\n\n\nFix build on Windows and MacOS."
  },
  {
    "objectID": "changelog.html#unreleased",
    "href": "changelog.html#unreleased",
    "title": "Changelog",
    "section": "",
    "text": "Arguments can be (mutable) typed slices such as &[Rbool], &mut [Rint] etc. [#790]\nNew optional faer feature which enables conversion between faer matrix and RMatrix&lt;f64&gt; [#706]\nAdds TryFrom&lt;Robj&gt; and &lt;TryFrom&lt;&Robj&gt; for impl blocks marked with #[extendr] macro allowing falliable conversion to &Self &mut Self\nAdds From&lt;T&gt; for Robj for impl blocks marked with #[extendr] macro\nThe new ExpectedExternalNonNullPtr error variant provides a more informative error when a null pointer is accessed\nRArray::data_mut provides a mutable slice to the underlying array data [#657]\nImplements the Attributes trait for all R vector wrapper structs (e.g. Integers , Doubles, Strings, etc.), allowing for easy access and setting of the attributes of an R object [#745]. This comes with breaking changes. See below.\nfeature non-api that gives access to non-API items; Requires compile-time generation of bindings [#754]\nTryFrom&lt;&Robj&gt; for StrIter, HashMap&lt;K, Robj&gt; for K = String and K = &str [#759]\n\n\n\n\n\nvector [#657]\n#[extendr(use_try_from = true) is now the default setting, therefore the option use_try_from has been removed [#759]\n\n\n\n\nR-devel Non-API changes:\n\nR’s C API is being formalized. While the changes are formalized, non-API functions are hidden behind a feature flag to prevent removal from CRAN.\nNon-API changes are in flux in R-devel, however, CRAN has set a July 9th date to remove any package that uses non-API functions. This includes almost every extendr based package on CRAN.\nSee [Rd] clarifying and adjusting the C API for R\nnonAPI.txt functions are hidden behind the non-api feature flag.\nRemoved from default include (but may not be limited to):\n\nglobal_var(), local_var(), base_env(), various Environment, Function, Primitive, and Promise methods.\n\n\nAttributes trait now returns a mutable reference to Self. [#745]. Previously .set_attrib() would modify an object in place, and then return an untyped owned pointer (Robj). Instead, now we return &mut Self.\nIn AltRep the unserialize_ex, set_parent, set_envflags are now hidden behind the feature flag non-api. Also, Promise::from_parts is marked as non-API.\nFloating point numbers with decimal part can no longer be converted to integer types via rounding [#757]\nYou can no longer create an Robj from a reference &T, where T is an extendr-impl. [#759]\nYou can no longer use from_robj, as the trait FromRobj as been removed. Instead, use try_from.\nIt is no longer possible to access an R integer vector as a &[u32] [#767]\n\n\n\n\n\n\nreturning &Self or &mut Self from a method in an #[extendr]-impl would result in unintended cloning [#614]\nTryFrom&lt;&Robj&gt; and FromRobj for integer scalars now correctly handles conversions from f64 [#757]"
  },
  {
    "objectID": "changelog.html#section",
    "href": "changelog.html#section",
    "title": "Changelog",
    "section": "",
    "text": "ALTLIST support allowing users to represent structs as R list objects\n[either] TryFrom&lt;&Robj&gt; for Either&lt;T, R&gt; and From&lt;Either&lt;T, R&gt;&gt; for Robj if T and R are themselves implement these traits. This unblocks scenarios like accepting any numeric vector from R via Either&lt;Integers, Doubles&gt; without extra memory allocation [#480]\nPartialOrd trait implementation for Rfloat, Rint and Rbool. Rfloat and Rint gained min() and max() methods [#573]\nuse_rng option for the extendr attribute macro, which enables the use of random number sampling methods from R, e.g. #[extendr(use_rng = true) [#476]\n[T; N] conversions to Robj [#594]\nToVectorValue for Rfloat, Rint and Rbool [#593]\nTryFrom&lt;_&gt; on Vec&lt;_&gt; for Integers (i32), Complexes (c64), Doubles (f64), and Logicals (bool / i32). [#593]\nRstr can now be constructed from Option&lt;String&gt; [#630]\n\n\n\n\n\nYou can now create ArrayView1 from &Robj as well as Robj [#501]\nRaw literals from Rust can be used for function and argument names. e.g. fn r#type() in Rust is converted to type() in R. [#531]\nFix memory leaks on errors and panics [#555]\nFixed error when collecting too many objects into List, etc. [#540]"
  },
  {
    "objectID": "changelog.html#section-1",
    "href": "changelog.html#section-1",
    "title": "Changelog",
    "section": "",
    "text": "Support for setting the default value of arguments to struct methods, using #[default = \"...\"] [#436]\n[ndarray] TryFrom&lt;&Robj&gt; for ArrayView1&lt;T&gt; and ArrayView2&lt;T&gt;, where T is i32, f64, c64, Rint, Rfloat, Rcplx, Rstr, Rbool [#443]\nDebug trait implementation for Rcplx and Complexes [#444]\nTryFrom&lt;Robj&gt;, From&lt;Option&lt;T&gt;&gt;, Into&lt;Option&lt;T&gt;&gt; and their variations for Nullable&lt;T&gt; [#446]\nNullable&lt;T&gt;::map() that acts on not null value and propagates NULL [#446]\n[ndarray] Conversion from owned arrays (ie ndarray::Array) into Robj [#450]\n[ndarray][docs] Documentation for the robj_ndarray module [#450]\nSum for scalars like Rint, Rfloat and Rcplx, which accept Iterator&lt;Item = &Rtype&gt; [#454]\nA new collect_rarray method that can be used to collect arbitrary iterables into an R matrix [#466]\n[docs] Documentation for RArray::new_matrix() [#466]\n\n\n\n\n\n[docs] Use bindgen on docs.rs, to ensure newer R features will still be documented [#426]\nUnify the tagging mechanism used to identify Rust types inside ExternalPtr. This allows #[extendr]-annotated functions to directly accept ExternalPtr&lt;MyStruct&gt; as well as MyStruct [#433]\nNullable&lt;T&gt; is now part of extendr_api::prelude [#446]\nBump the Rust edition from 2018 to 2021 [#458]\nWhen converted to STRSXP, strings are now correctly marked as UTF-8 even on non-UTF-8 platforms (i.e., R &lt; 4.2 on Windows), which shouldn’t matter for most of the users [#467]\n\n\n\n\n\nThe R CMD check note “Found non-API calls to R” by moving use extendr_engine; inside test! macro [#424]\nThe clippy lint “this public function might dereference a raw pointer but is not marked unsafe” [#451]\nA bug where importing a submodule via use some_module; inside the extendr_module! macro wasn’t working [#469]"
  },
  {
    "objectID": "changelog.html#section-2",
    "href": "changelog.html#section-2",
    "title": "Changelog",
    "section": "",
    "text": "Function type that wraps an R function, which can be invoked using the call() method. [#188]\npairlist! macro for generating Pairlist objects, e.g. for use in function calls. [#202]\nuse_try_from option for the extendr macro, which allows the use of any type that implements TryInto&lt;Robj&gt;/TryFrom&lt;Robj&gt;, e.g. #[extendr(use_try_from = true)]. [#222]\nSupport for R version 4.2. [#235]\ncall! macro, which can be used to call an R function whose name is provided as a string. [#238]\nLarge Rust integer types (u32, u64 and i64) can now be converted to R’s numeric type, which can handle large integer values. [#242]\nTryFrom&lt;Robj&gt; for a large number of Rust types. [#249], [#258]\nSupport for ALTREP. [#250], [#274]\nS4 struct, which wraps an S4 class in R. [#268]\n[ndarray] Implemented TryFrom&lt;&ArrayBase&gt; for Robj, allowing extendr-annotated functions to return Arrays from the ndarray crate and have them automatically converted to R arrays. [#275]\nRint, Rdouble, Rbool and Rcplx: NA-aware wrappers for scalar elements of R vectors [#274], [#284], [#301], [#338], [#350]\nIntegers, Doubles, Strings, Logicals and Complexes: wrappers for R vectors that deref to slices of the above types (RInt etc). [#274], [#284], [#301], [#338], [#350]\nExternalPtr, a wrapper class for creating R objects containing any Rust object. [#260]\n[graphics] Support for R graphics and graphics devices. The graphics feature flag is disabled by default. [#279], [#360], [#373], [#379], [#380], [#389]\nDeref implementation for vector types (Rint/Rfloat/Rbool/Rstr/Robj) to appropriately typed Rust slices. [#327]\ndefault option for extendr-annotated functions, allowing them to have default values, e.g. fn fred(#[default=\"NULL\"] x: Option&lt;i32&gt;) { }. [#334]\nr_name option for extendr-annotated functions, allowing the generated R function to have a different name. e.g.\n#[extendr(\n    use_try_from = true,\n    r_name = \"test.rename.rlike\",\n    mod_name = \"test_rename_mymod\"\n)]\nfn test_rename() { }\n[#335]\nserde::Serialize implementation for R types. [#305], [#355]\nRany type and the as_any conversion method. [#320]\nstd::fmt::Debug implementation for wrapper types. [#345]\n#[derive(TryFromRobj) and #[derive(IntoRobj)] which provide an automatic conversion from and to any custom Rust struct and Robj [#347]\n[[ operator that works with Rust classes. Its behavior is identical to that of the $ operator. [#359]\nLoad and Save, traits that, once implemented, provide the ability to load and save R data in the RDS format. These traits are implemented for all Robj. [#363]\nDataframe wrapper struct. [#393]\nIntoDataFrame trait, which can be derived to allow arbitrary Rust structs to be converted to rows of a data frame. [#393]\n\n\n\n\n\nStrings::elt now returns an Rstr. [#345]\nRenamed RType to Rtype. [#345]\nWrapper types now contain Robj fields. [#190]\nThe R! macro now accepts strings that contain R code. This is now the recommended way of using the macro, especially with raw strings e.g.\nR!(r#\"\n    print(\"hello\")\n\"#);\n[#203]\nImproved error handling for &lt;&str&gt;::try_from(Robj). [#226]\nSymPair::sym_pair() now returns (Option&lt;Robj&gt;, Robj). [#225]\nMore detailed error messages when converting Rust integer types to R. [#243]\nCharacter is now called Rstr. [#273]\n[ndarray] Bumped ndarray to 0.15.3. Under RFC 1977 this is a “public dependency” change, and therefore can be considered a breaking change, as consumers of extendr that use an older version of ndarray will no longer be compatible until they also bump ndarray to a compatible version. [#275]\nIsNA trait has been renamed to CanBeNA. [#288]\nlist! has been rewritten, and now returns a List struct. [#303]\n\n\n\n\n\nCalling the R! macro with non-string types (e.g. R!(1)) is now deprecated. [#203]\n\n\n\n\n\nReal, Int, Bool and the redundant trait SliceIter, which should be replaced with Rdouble, Rint, and Rbool respectively. [#304], [#338]\nTryFrom conversions between Robj and HashMap for consistency. List::into_hashmap() and List::from_hashmap() should be used instead. [#254]"
  },
  {
    "objectID": "changelog.html#extendr-0.2.0",
    "href": "changelog.html#extendr-0.2.0",
    "title": "Changelog",
    "section": "",
    "text": "Added contributing guidelines and code of conduct.\nMade use of ndarray optional.\nMade #[extendr] calls panic and thread safe.\nAdded NA handling to the #[extendr] macro.\nAdded a separate extendr-engine crate that is needed when calling R from Rust.\nWrapper classes for pairlists, environment, raw, symbols and others.\nMore iterator support.\nOperators index, slice, dollar, double_colon, +, -, * and /`.\nDebug printing support expanded to use wrappers.\nConversion of Robj to wrapper types.\nMultithreaded support - allows multithreaded testing using a recursive spinlock.\nBool type extended and implemented using TRUE, FALSE and NA_BOOLEAN.\nOptional parameters to support NA handing.\nErrors thrown if input parameters without Option are NA.\nHarmonising of function names into integer, real, logical, symbol, raw, list, pairlist and env.\nRefactored robj code into several source files.\nMany functions updated to use generic types.\nR! macro for executing R source code.\ncall! macro to call R code.\nsym! macro to generate symbols.\nSimplification of vector generation using collect_robj and ToVectorValue.\nAdded array types [1, 2, 3] as Robj::from targets.\nMacros now mostly return errors."
  },
  {
    "objectID": "changelog.html#extendr-0.1.10",
    "href": "changelog.html#extendr-0.1.10",
    "title": "Changelog",
    "section": "",
    "text": "Fix build on Windows and MacOS."
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "Contributing",
    "section": "",
    "text": "We welcome contributions to the extendr project. Contributions come in many forms. Please carefully read and follow these guidelines. This will help us make the contribution process easy and effective for everyone involved. It also communicates that you agree to respect the time of the developers managing and developing this project.\n\n\n\nCode of Conduct\nGetting Started\n\nIssues\nPull Requests\n\nGetting Help\nAuthorship\nAttribution\n\n\n\n\nWe take our open source community seriously and hold ourselves and other contributors to high standards of communication. By participating and contributing to this project, you agree to uphold our Code of Conduct.\n\n\n\nContributions can be made via Issues and Pull Requests (PRs). A few general guidelines cover both:\n\nPlease search for existing Issues and PRs before creating your own.\nWe work hard to makes sure issues are handled in a timely manner but, depending on the problem and maintainer availability, it could take a while to investigate the problem. A friendly ping in the comment thread can help draw attention if an issue has not received any attention for a while. Please keep in mind that all contributors to this project are volunteers and may have other commitments they need to attend to.\n\n\n\nIssues should be used to report problems with the library, request a new feature, or to discuss potential changes before a PR is created. Please do not use Issues to request user support.\nWhenever possible, please provide a minimal reproducible example (reprex) to any bug report that you are filing. The more minimal your example, the more likely that somebody else can figure out what the problem is, so please remove any code that isn’t relevant to the problem you are reporting.\nPlease keep issues focused on one particular problem. Don’t feel shy about opening multiple issues if you’re encountering more than one problem.\nIf you find an Issue that addresses the problem you’re having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help be indicating to our maintainers that a particular problem is affecting more than just the reporter.\n\n\n\nPRs are always welcome and can be a quick way to get your fix or improvement slated for the next release. However, please always open an Issue before submitting a PR.\nIn general, PRs should:\n\nAddress a single concern in the least number of changed lines as possible.\nOnly fix/add the functionality in question OR address wide-spread whitespace/style issues, not both.\nAdd unit or integration tests for fixed or changed functionality.\nInclude documentation.\nIndicate which Issue they address by using the words Closes #&lt;issue number&gt; or Fixes #&lt;issue number&gt; in the body of the PR and/or the git commit message. (See the GitHub Documentation for details about linking PRs to Issues and automatically closing Issues when merging PRs.)\n\nIn general, we follow the GitHub flow development model:\n\nFork the repository to your own Github account\nClone the project to your machine\nCreate a branch locally with a succinct but descriptive name\nCommit changes to the branch\nPush changes to your fork\nOpen a PR in our repository and follow the PR template so that we can efficiently review the changes.\n\n\n\n\n\nPlease join us on our Discord server for general conversations and questions that don’t belong into a GitHub issue.\n\n\n\nContributors who have made multiple, sustained, and/or non-trivial contributions to the project may be added to the author list. New author names will always be added at the end of the list, so that author order reflects chronological order of joining the project. All authorship decisions are at the discretion of the current maintainers of the project.\n\n\n\nThis document was adapted from the General Contributing Guidelines of the auth0 project."
  },
  {
    "objectID": "CONTRIBUTING.html#quicklinks",
    "href": "CONTRIBUTING.html#quicklinks",
    "title": "Contributing",
    "section": "",
    "text": "Code of Conduct\nGetting Started\n\nIssues\nPull Requests\n\nGetting Help\nAuthorship\nAttribution"
  },
  {
    "objectID": "CONTRIBUTING.html#code-of-conduct",
    "href": "CONTRIBUTING.html#code-of-conduct",
    "title": "Contributing",
    "section": "",
    "text": "We take our open source community seriously and hold ourselves and other contributors to high standards of communication. By participating and contributing to this project, you agree to uphold our Code of Conduct."
  },
  {
    "objectID": "CONTRIBUTING.html#getting-started",
    "href": "CONTRIBUTING.html#getting-started",
    "title": "Contributing",
    "section": "",
    "text": "Contributions can be made via Issues and Pull Requests (PRs). A few general guidelines cover both:\n\nPlease search for existing Issues and PRs before creating your own.\nWe work hard to makes sure issues are handled in a timely manner but, depending on the problem and maintainer availability, it could take a while to investigate the problem. A friendly ping in the comment thread can help draw attention if an issue has not received any attention for a while. Please keep in mind that all contributors to this project are volunteers and may have other commitments they need to attend to.\n\n\n\nIssues should be used to report problems with the library, request a new feature, or to discuss potential changes before a PR is created. Please do not use Issues to request user support.\nWhenever possible, please provide a minimal reproducible example (reprex) to any bug report that you are filing. The more minimal your example, the more likely that somebody else can figure out what the problem is, so please remove any code that isn’t relevant to the problem you are reporting.\nPlease keep issues focused on one particular problem. Don’t feel shy about opening multiple issues if you’re encountering more than one problem.\nIf you find an Issue that addresses the problem you’re having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help be indicating to our maintainers that a particular problem is affecting more than just the reporter.\n\n\n\nPRs are always welcome and can be a quick way to get your fix or improvement slated for the next release. However, please always open an Issue before submitting a PR.\nIn general, PRs should:\n\nAddress a single concern in the least number of changed lines as possible.\nOnly fix/add the functionality in question OR address wide-spread whitespace/style issues, not both.\nAdd unit or integration tests for fixed or changed functionality.\nInclude documentation.\nIndicate which Issue they address by using the words Closes #&lt;issue number&gt; or Fixes #&lt;issue number&gt; in the body of the PR and/or the git commit message. (See the GitHub Documentation for details about linking PRs to Issues and automatically closing Issues when merging PRs.)\n\nIn general, we follow the GitHub flow development model:\n\nFork the repository to your own Github account\nClone the project to your machine\nCreate a branch locally with a succinct but descriptive name\nCommit changes to the branch\nPush changes to your fork\nOpen a PR in our repository and follow the PR template so that we can efficiently review the changes."
  },
  {
    "objectID": "CONTRIBUTING.html#getting-help",
    "href": "CONTRIBUTING.html#getting-help",
    "title": "Contributing",
    "section": "",
    "text": "Please join us on our Discord server for general conversations and questions that don’t belong into a GitHub issue."
  },
  {
    "objectID": "CONTRIBUTING.html#authorship",
    "href": "CONTRIBUTING.html#authorship",
    "title": "Contributing",
    "section": "",
    "text": "Contributors who have made multiple, sustained, and/or non-trivial contributions to the project may be added to the author list. New author names will always be added at the end of the list, so that author order reflects chronological order of joining the project. All authorship decisions are at the discretion of the current maintainers of the project."
  },
  {
    "objectID": "CONTRIBUTING.html#attribution",
    "href": "CONTRIBUTING.html#attribution",
    "title": "Contributing",
    "section": "",
    "text": "This document was adapted from the General Contributing Guidelines of the auth0 project."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "extendr",
    "section": "",
    "text": "Extendr is a Rust extension mechanism for R\nThe following code illustrates a simple structure trait which is written in Rust. The data is defined in the struct declaration and the methods in the impl.\nExtendr consists of the following projects:\nThe #[extendr] attribute causes the compiler to generate wrapper and registration functions for R which are called when the package is loaded.\nOn R’s side, users can access to the above Rust functions as follows:\nThe extendr_module! macro lists the module name and exported functions and interfaces.\nThis library aims to provide an interface that will be familiar to first-time users of Rust or indeed any compiled language.\nAnyone who knows the R library should be able to write R extensions."
  },
  {
    "objectID": "index.html#wrappers-for-r-types",
    "href": "index.html#wrappers-for-r-types",
    "title": "extendr",
    "section": "Wrappers for R types",
    "text": "Wrappers for R types\nExtendr provides a number of wrappers for R types. These fall into three categories, scalar types such as a single integer, vector types which are an array of a scalar type and linked list types used to represent R code and call arguments.\n\nScalar types\n\n\n\n\n\n\n\n\nR type\nExtendr wrapper\nDeref type: &*object\n\n\n\n\nAny\nextendr_api::robj::Robj\nN/A\n\n\ncharacter\nextendr_api::wrapper::Rstr\nN/A\n\n\ninteger\nextendr_api::wrapper::Rint\nN/A\n\n\ndouble\nextendr_api::wrapper::Rfloat\nN/A\n\n\ncomplex\nextendr_api::wrapper::Rcplx\nN/A\n\n\nextptr\nextendr_api::wrapper::ExternalPtr&lt;T&gt;\n&T / &mut T\n\n\n\n\n\nVector types\n\n\n\n\n\n\n\n\nR type\nExtendr wrapper\nDeref type: &*object\n\n\n\n\ninteger\nextendr_api::wrapper::Integers\n&[Rint]\n\n\ndouble\nextendr_api::wrapper::Doubles\n&[Rfloat]\n\n\nlogical\nextendr_api::wrapper::Logicals\n&[Rbool]\n\n\ncomplex\nextendr_api::wrapper::Complexes\n&[Rcplx]\n\n\nstring\nextendr_api::wrapper::Strings\n&[Rstr]\n\n\nlist\nextendr_api::wrapper::List\n&[Robj]\n\n\ndata.frame\nextendr_api::wrapper::Dataframe&lt;T&gt;\n&[Robj]\n\n\nexpression\nextendr_api::wrapper::Expression\n&[Lang]\n\n\n\n\n\nLinked list types\n\n\n\n\n\n\n\n\nR type\nExtendr wrapper\nDeref type: &*object\n\n\n\n\npairlist\nextendr_api::wrapper::Pairlist\nN/A\n\n\nlang\nextendr_api::wrapper::Lang\nN/A"
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "extendr",
    "section": "Examples",
    "text": "Examples\n\nReturning lists and strings\nLists and strings in rust are vectors of R objects. These are represented by the wrappers List and Strings.\nList contains a slice of Robj wrappers which can contain any R object.\nStrings contains a slice of Rstr wrappers which can contain a single string.\nThese examples show how to return a list or string to R from Rust.\nuse extendr_api::wrapper::{List, Strings};\nuse extendr_api::list;\n\nfn get_strings() -&gt; Strings {\n    Strings::from_values(\n        (0..10)\n        .map(|i| format!(\"number {}\", i))\n    )\n}\n\nfn get_named_list() -&gt; List {\n    list!(x=1, y=\"xyz\", z=())\n}\n\nfn get_unnamed_list() -&gt; List {\n    List::from_values(0..10)\n}\n\n\nReturning scalars\nWhilst we can use i32 and f64 in Extendr to return values. A better way is to use the Rint and Rfloat wrappers which provide access to the NA value used by R to represent missing data.\nuse extendr_api::scalar::{Rint, Rfloat};\n\n// for .na()\nuse extendr_api::CanBeNA;\n\nfn get_int() -&gt; Rint {\n    Rint::from(1)\n}\n\nfn get_na_int() -&gt; Rint {\n    Rint::na()\n}\n\nfn get_float() -&gt; Rfloat {\n    Rfloat::from(1.0)\n}\n\nfn get_na_float() -&gt; Rfloat {\n    Rfloat::na()\n}\n\n\nPlotting a PNG file from Rust\nWe can use Extendr to take advantage of the stats and plotting functions in R.\nFor example, we could make a web server that returns plots of incoming data.\nuse extendr_api::{test, Result, eval_string, eval_string_with_params};\nuse extendr_api::{Doubles, R};\n\nfn main() {\n    test!{\n        let x = Doubles::from_values((0..100).map(|i| i as f64 / 20.0));\n\n        // let y = Doubles::from_values(x.iter().map(|x| x.inner().sin()));\n        let y = Doubles::from_values((0..100).map(|i| (i as f64 / 20.0).sin()));\n\n        // Set a PNG device\n        R!(r#\"png(\"/tmp/sin_plot.png\")\"#)?;\n\n        // Plot x and y\n        R!(\"plot({{&x}}, {{&y}})\")?;\n\n        // Linear model.\n        R!(\"abline(lm({{y}} ~ {{x}}))\")?;\n\n        // Flush the device to the image.\n        R!(\"dev.off()\")?;\n    }\n}"
  }
]