[
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "What can I use extendr for?\n\n\nHow do I install extendr?\n\n\nWho are the developers of extendr?\nAuthors and maintainers include:\n\nAmy Thomason (author and creator, @andy-thomason)\nMossa M. Reimert (author and maintainer, @CGMossa)\nClaus O. Wilke (author, @clauswilke)\nHoroaki Yutani (author, @yutannihilation)\nIlia Kosenkov (author and maintainer, @Ilia-Kosenkov)\nDaniel Falbel (author, @dfalbel)\nJosiah Parry (maintainer, @JosiahParry)"
  },
  {
    "objectID": "started.html",
    "href": "started.html",
    "title": "Getting started",
    "section": "",
    "text": "Extendr is available on crates.io.\nSimply add this line to the [dependencies] section of a rust crate’s Cargo.toml. You will then be able to call R code from Rust."
  },
  {
    "objectID": "started.html#installation---r",
    "href": "started.html#installation---r",
    "title": "Getting started",
    "section": "Installation - R",
    "text": "Installation - R\nThere are two ways you can use the extendr API from R. First, you can use the rextendr package to call individual Rust functions from an R session. Second, you can write an R package that uses compiled Rust code, see the helloextendr repo for a minimal example."
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "Contributing",
    "section": "",
    "text": "We welcome contributions to the extendr project. Contributions come in many forms. Please carefully read and follow these guidelines. This will help us make the contribution process easy and effective for everyone involved. It also communicates that you agree to respect the time of the developers managing and developing this project.\n\n\n\nCode of Conduct\nGetting Started\n\nIssues\nPull Requests\n\nGetting Help\nAuthorship\nAttribution\n\n\n\n\nWe take our open source community seriously and hold ourselves and other contributors to high standards of communication. By participating and contributing to this project, you agree to uphold our Code of Conduct.\n\n\n\nContributions can be made via Issues and Pull Requests (PRs). A few general guidelines cover both:\n\nPlease search for existing Issues and PRs before creating your own.\nWe work hard to makes sure issues are handled in a timely manner but, depending on the problem and maintainer availability, it could take a while to investigate the problem. A friendly ping in the comment thread can help draw attention if an issue has not received any attention for a while. Please keep in mind that all contributors to this project are volunteers and may have other commitments they need to attend to.\n\n\n\nIssues should be used to report problems with the library, request a new feature, or to discuss potential changes before a PR is created. Please do not use Issues to request user support.\nWhenever possible, please provide a minimal reproducible example (reprex) to any bug report that you are filing. The more minimal your example, the more likely that somebody else can figure out what the problem is, so please remove any code that isn’t relevant to the problem you are reporting.\nPlease keep issues focused on one particular problem. Don’t feel shy about opening multiple issues if you’re encountering more than one problem.\nIf you find an Issue that addresses the problem you’re having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help be indicating to our maintainers that a particular problem is affecting more than just the reporter.\n\n\n\nPRs are always welcome and can be a quick way to get your fix or improvement slated for the next release. However, please always open an Issue before submitting a PR.\nIn general, PRs should:\n\nAddress a single concern in the least number of changed lines as possible.\nOnly fix/add the functionality in question OR address wide-spread whitespace/style issues, not both.\nAdd unit or integration tests for fixed or changed functionality.\nInclude documentation.\nIndicate which Issue they address by using the words Closes #&lt;issue number&gt; or Fixes #&lt;issue number&gt; in the body of the PR and/or the git commit message. (See the GitHub Documentation for details about linking PRs to Issues and automatically closing Issues when merging PRs.)\n\nIn general, we follow the GitHub flow development model:\n\nFork the repository to your own Github account\nClone the project to your machine\nCreate a branch locally with a succinct but descriptive name\nCommit changes to the branch\nPush changes to your fork\nOpen a PR in our repository and follow the PR template so that we can efficiently review the changes.\n\n\n\n\n\nPlease join us on our Discord server for general conversations and questions that don’t belong into a GitHub issue.\n\n\n\nContributors who have made multiple, sustained, and/or non-trivial contributions to the project may be added to the author list. New author names will always be added at the end of the list, so that author order reflects chronological order of joining the project. All authorship decisions are at the discretion of the current maintainers of the project.\n\n\n\nThis document was adapted from the General Contributing Guidelines of the auth0 project."
  },
  {
    "objectID": "CONTRIBUTING.html#quicklinks",
    "href": "CONTRIBUTING.html#quicklinks",
    "title": "Contributing",
    "section": "",
    "text": "Code of Conduct\nGetting Started\n\nIssues\nPull Requests\n\nGetting Help\nAuthorship\nAttribution"
  },
  {
    "objectID": "CONTRIBUTING.html#code-of-conduct",
    "href": "CONTRIBUTING.html#code-of-conduct",
    "title": "Contributing",
    "section": "",
    "text": "We take our open source community seriously and hold ourselves and other contributors to high standards of communication. By participating and contributing to this project, you agree to uphold our Code of Conduct."
  },
  {
    "objectID": "CONTRIBUTING.html#getting-started",
    "href": "CONTRIBUTING.html#getting-started",
    "title": "Contributing",
    "section": "",
    "text": "Contributions can be made via Issues and Pull Requests (PRs). A few general guidelines cover both:\n\nPlease search for existing Issues and PRs before creating your own.\nWe work hard to makes sure issues are handled in a timely manner but, depending on the problem and maintainer availability, it could take a while to investigate the problem. A friendly ping in the comment thread can help draw attention if an issue has not received any attention for a while. Please keep in mind that all contributors to this project are volunteers and may have other commitments they need to attend to.\n\n\n\nIssues should be used to report problems with the library, request a new feature, or to discuss potential changes before a PR is created. Please do not use Issues to request user support.\nWhenever possible, please provide a minimal reproducible example (reprex) to any bug report that you are filing. The more minimal your example, the more likely that somebody else can figure out what the problem is, so please remove any code that isn’t relevant to the problem you are reporting.\nPlease keep issues focused on one particular problem. Don’t feel shy about opening multiple issues if you’re encountering more than one problem.\nIf you find an Issue that addresses the problem you’re having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help be indicating to our maintainers that a particular problem is affecting more than just the reporter.\n\n\n\nPRs are always welcome and can be a quick way to get your fix or improvement slated for the next release. However, please always open an Issue before submitting a PR.\nIn general, PRs should:\n\nAddress a single concern in the least number of changed lines as possible.\nOnly fix/add the functionality in question OR address wide-spread whitespace/style issues, not both.\nAdd unit or integration tests for fixed or changed functionality.\nInclude documentation.\nIndicate which Issue they address by using the words Closes #&lt;issue number&gt; or Fixes #&lt;issue number&gt; in the body of the PR and/or the git commit message. (See the GitHub Documentation for details about linking PRs to Issues and automatically closing Issues when merging PRs.)\n\nIn general, we follow the GitHub flow development model:\n\nFork the repository to your own Github account\nClone the project to your machine\nCreate a branch locally with a succinct but descriptive name\nCommit changes to the branch\nPush changes to your fork\nOpen a PR in our repository and follow the PR template so that we can efficiently review the changes."
  },
  {
    "objectID": "CONTRIBUTING.html#getting-help",
    "href": "CONTRIBUTING.html#getting-help",
    "title": "Contributing",
    "section": "",
    "text": "Please join us on our Discord server for general conversations and questions that don’t belong into a GitHub issue."
  },
  {
    "objectID": "CONTRIBUTING.html#authorship",
    "href": "CONTRIBUTING.html#authorship",
    "title": "Contributing",
    "section": "",
    "text": "Contributors who have made multiple, sustained, and/or non-trivial contributions to the project may be added to the author list. New author names will always be added at the end of the list, so that author order reflects chronological order of joining the project. All authorship decisions are at the discretion of the current maintainers of the project."
  },
  {
    "objectID": "CONTRIBUTING.html#attribution",
    "href": "CONTRIBUTING.html#attribution",
    "title": "Contributing",
    "section": "",
    "text": "This document was adapted from the General Contributing Guidelines of the auth0 project."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "extendr",
    "section": "",
    "text": "Extendr is a Rust extension mechanism for R\nThe following code illustrates a simple structure trait which is written in Rust. The data is defined in the struct declaration and the methods in the impl.\nExtendr consists of the following projects:\nThe #[extendr] attribute causes the compiler to generate wrapper and registration functions for R which are called when the package is loaded.\nOn R’s side, users can access to the above Rust functions as follows:\nThe extendr_module! macro lists the module name and exported functions and interfaces.\nThis library aims to provide an interface that will be familiar to first-time users of Rust or indeed any compiled language.\nAnyone who knows the R library should be able to write R extensions."
  },
  {
    "objectID": "index.html#wrappers-for-r-types",
    "href": "index.html#wrappers-for-r-types",
    "title": "extendr",
    "section": "Wrappers for R types",
    "text": "Wrappers for R types\nExtendr provides a number of wrappers for R types. These fall into three categories, scalar types such as a single integer, vector types which are an array of a scalar type and linked list types used to represent R code and call arguments.\n\nScalar types\n\n\n\n\n\n\n\n\nR type\nExtendr wrapper\nDeref type: &*object\n\n\n\n\nAny\nextendr_api::robj::Robj\nN/A\n\n\ncharacter\nextendr_api::wrapper::Rstr\nN/A\n\n\ninteger\nextendr_api::wrapper::Rint\nN/A\n\n\ndouble\nextendr_api::wrapper::Rfloat\nN/A\n\n\ncomplex\nextendr_api::wrapper::Rcplx\nN/A\n\n\nextptr\nextendr_api::wrapper::ExternalPtr&lt;T&gt;\n&T / &mut T\n\n\n\n\n\nVector types\n\n\n\n\n\n\n\n\nR type\nExtendr wrapper\nDeref type: &*object\n\n\n\n\ninteger\nextendr_api::wrapper::Integers\n&[Rint]\n\n\ndouble\nextendr_api::wrapper::Doubles\n&[Rfloat]\n\n\nlogical\nextendr_api::wrapper::Logicals\n&[Rbool]\n\n\ncomplex\nextendr_api::wrapper::Complexes\n&[Rcplx]\n\n\nstring\nextendr_api::wrapper::Strings\n&[Rstr]\n\n\nlist\nextendr_api::wrapper::List\n&[Robj]\n\n\ndata.frame\nextendr_api::wrapper::Dataframe&lt;T&gt;\n&[Robj]\n\n\nexpression\nextendr_api::wrapper::Expression\n&[Lang]\n\n\n\n\n\nLinked list types\n\n\n\n\n\n\n\n\nR type\nExtendr wrapper\nDeref type: &*object\n\n\n\n\npairlist\nextendr_api::wrapper::Pairlist\nN/A\n\n\nlang\nextendr_api::wrapper::Lang\nN/A"
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "extendr",
    "section": "Examples",
    "text": "Examples\n\nReturning lists and strings\nLists and strings in rust are vectors of R objects. These are represented by the wrappers List and Strings.\nList contains a slice of Robj wrappers which can contain any R object.\nStrings contains a slice of Rstr wrappers which can contain a single string.\nThese examples show how to return a list or string to R from Rust.\nuse extendr_api::wrapper::{List, Strings};\nuse extendr_api::list;\n\nfn get_strings() -&gt; Strings {\n    Strings::from_values(\n        (0..10)\n        .map(|i| format!(\"number {}\", i))\n    )\n}\n\nfn get_named_list() -&gt; List {\n    list!(x=1, y=\"xyz\", z=())\n}\n\nfn get_unnamed_list() -&gt; List {\n    List::from_values(0..10)\n}\n\n\nReturning scalars\nWhilst we can use i32 and f64 in Extendr to return values. A better way is to use the Rint and Rfloat wrappers which provide access to the NA value used by R to represent missing data.\nuse extendr_api::scalar::{Rint, Rfloat};\n\n// for .na()\nuse extendr_api::CanBeNA;\n\nfn get_int() -&gt; Rint {\n    Rint::from(1)\n}\n\nfn get_na_int() -&gt; Rint {\n    Rint::na()\n}\n\nfn get_float() -&gt; Rfloat {\n    Rfloat::from(1.0)\n}\n\nfn get_na_float() -&gt; Rfloat {\n    Rfloat::na()\n}\n\n\nPlotting a PNG file from Rust\nWe can use Extendr to take advantage of the stats and plotting functions in R.\nFor example, we could make a web server that returns plots of incoming data.\nuse extendr_api::{test, Result, eval_string, eval_string_with_params};\nuse extendr_api::{Doubles, R};\n\nfn main() {\n    test!{\n        let x = Doubles::from_values((0..100).map(|i| i as f64 / 20.0));\n\n        // let y = Doubles::from_values(x.iter().map(|x| x.inner().sin()));\n        let y = Doubles::from_values((0..100).map(|i| (i as f64 / 20.0).sin()));\n\n        // Set a PNG device\n        R!(r#\"png(\"/tmp/sin_plot.png\")\"#)?;\n\n        // Plot x and y\n        R!(\"plot({{&x}}, {{&y}})\")?;\n\n        // Linear model.\n        R!(\"abline(lm({{y}} ~ {{x}}))\")?;\n\n        // Flush the device to the image.\n        R!(\"dev.off()\")?;\n    }\n}"
  },
  {
    "objectID": "CHANGELOG.html",
    "href": "CHANGELOG.html",
    "title": "Changelog",
    "section": "",
    "text": "Fixed Clippy warnings\nFixed “myvar” test failures - related to base_env() being the “local” enviroment in the tests.\nFixes for builds on ARM and PPC platforms.\nConverted R! to a procedural macro, allowing parameters.\nConverted pairlist! to a procedural macro.\nRefactor extendr_macros.\nRemove unused lazy_static\nContinued improvments to wrappers for specific R types such as environments, functions and symbols.\nInstall system dependencies on Linux.\nUse Use failure() to trigger steps on failures\nSymPair::sym_pair() now returns (Option&lt;Robj&gt;, Robj)\n\n\n\n\n\nAdded contributing guidelines and code of conduct.\nMade use of ndarray optional.\nMade #[extendr] calls panic and thread safe.\nAdded NA handling to the #[extendr] macro.\nAdded a separate extendr-engine crate that is needed when calling R from Rust.\nWrapper classes for pairlists, environment, raw, symbols and others.\nMore iterator support.\nOperators index, slice, dollar, double_colon, +, -, * and /`.\nDebug printing support expanded to use wrappers.\nConversion of Robj to wrapper types.\nMultithreaded support - allows multithreaded testing using a recursive spinlock.\nBool type extended and implemented using TRUE, FALSE and NA_BOOLEAN.\nOptional parameters to support NA handing.\nErrors thrown if input parameters without Option are NA.\nHarmonising of function names into integer, real, logical, symbol, raw, list, pairlist and env.\nRefactored robj code into several source files.\nMany functions updated to use generic types.\nR! macro for executing R source code.\ncall! macro to call R code.\nsym! macro to generate symbols.\nSimplification of vector generation using collect_robj and ToVectorValue.\nAdded array types [1, 2, 3] as Robj::from targets.\nMacros now mostly return errors.\n\n\n\n\n\nFix build on Windows and MacOS."
  },
  {
    "objectID": "CHANGELOG.html#extendr-devel",
    "href": "CHANGELOG.html#extendr-devel",
    "title": "Changelog",
    "section": "",
    "text": "Fixed Clippy warnings\nFixed “myvar” test failures - related to base_env() being the “local” enviroment in the tests.\nFixes for builds on ARM and PPC platforms.\nConverted R! to a procedural macro, allowing parameters.\nConverted pairlist! to a procedural macro.\nRefactor extendr_macros.\nRemove unused lazy_static\nContinued improvments to wrappers for specific R types such as environments, functions and symbols.\nInstall system dependencies on Linux.\nUse Use failure() to trigger steps on failures\nSymPair::sym_pair() now returns (Option&lt;Robj&gt;, Robj)"
  },
  {
    "objectID": "CHANGELOG.html#extendr-0.2.0",
    "href": "CHANGELOG.html#extendr-0.2.0",
    "title": "Changelog",
    "section": "",
    "text": "Added contributing guidelines and code of conduct.\nMade use of ndarray optional.\nMade #[extendr] calls panic and thread safe.\nAdded NA handling to the #[extendr] macro.\nAdded a separate extendr-engine crate that is needed when calling R from Rust.\nWrapper classes for pairlists, environment, raw, symbols and others.\nMore iterator support.\nOperators index, slice, dollar, double_colon, +, -, * and /`.\nDebug printing support expanded to use wrappers.\nConversion of Robj to wrapper types.\nMultithreaded support - allows multithreaded testing using a recursive spinlock.\nBool type extended and implemented using TRUE, FALSE and NA_BOOLEAN.\nOptional parameters to support NA handing.\nErrors thrown if input parameters without Option are NA.\nHarmonising of function names into integer, real, logical, symbol, raw, list, pairlist and env.\nRefactored robj code into several source files.\nMany functions updated to use generic types.\nR! macro for executing R source code.\ncall! macro to call R code.\nsym! macro to generate symbols.\nSimplification of vector generation using collect_robj and ToVectorValue.\nAdded array types [1, 2, 3] as Robj::from targets.\nMacros now mostly return errors."
  },
  {
    "objectID": "CHANGELOG.html#extendr-0.1.10",
    "href": "CHANGELOG.html#extendr-0.1.10",
    "title": "Changelog",
    "section": "",
    "text": "Fix build on Windows and MacOS."
  }
]