---
title: "`h3o` is now on CRAN‚ÄºÔ∏è"
description: |
  R users now have access to a pure Rust implementation of Uber's H3, a 
  hexagonal geospatial grid and indexing system.
author: Blake Vernon
date: "2025/09/09"
image: thumbnail.png
image-alt: "The letters h3o on a hexagonal sticker."
categories: [Release]
---

The extendr-powered R package `h3o` provides access to [a pure Rust implementation](https://github.com/HydroniumLabs/h3o) 
of [Uber's H3 Geospatial Indexing System](https://github.com/uber/h3). 
Originally developed by Josiah Parry, the R package has also become an official 
product of extendr, which means community support ü§ù and maintenance üèóÔ∏è into 
the foreseeable future.

## `h3o` at a glance üëÄ

The package provides functionality to interact with H3's grid as vectors, which 
can be converted to and from `sf` geometries. 

```{r}
#| label: example
#| warning: false
#| message: false
library(h3o)
library(dplyr)
library(sf)
library(tibble)

xy <- data.frame(
  x = runif(100, -5, 10),
  y = runif(100, 40, 50)
)

pnts <- st_as_sf(
  xy,
  coords = c("x", "y"),
  crs = 4326
)

pnts |> mutate(h3 = h3_from_points(geometry, 5))
```

You can use the `st_as_sfc()` method to convert H3 hexagons to sf `POLYGON`s.

```{r}
# replace geometry
h3_cells <- pnts |>
  mutate(
    h3 = h3_from_points(geometry, 4),
    geometry = st_as_sfc(h3)
  )

# plot the hexagons
plot(st_geometry(h3_cells))
```

H3 cell centroids can be returned using `h3_to_points()`. If `sf` is avilable,
the results will be returned as an `sfc` (sf column) object. Otherwise it will
return a list of `sfg` (sf geometries).

```{r}
# fetch h3 column
h3s <- h3_cells[["h3"]]

# get there centers
h3_centers <- h3_to_points(h3s)

# plot the hexagons with the centers
plot(st_geometry(h3_cells))
plot(h3_centers, pch = 16, add = TRUE, col = "black")
```

## H3 at light speed ‚ö°

Because it builds on a pure Rust implementation, `h3o` is also very very fast. 
Here are some benchmarks, which also serve to showcase `h3o` tools.

### Creating polygons

```{r}
h3_strs <- as.character(h3s)
bench::mark(
  h3o = st_as_sfc(h3s),
  h3jsr = h3jsr::cell_to_polygon(h3_strs),
  relative = TRUE
)
```

### Converting polygons to H3 cells:

```{r}
nc <- st_read(system.file("gpkg/nc.gpkg", package = "sf"), quiet = TRUE) |>
  st_transform(4326) |>
  st_geometry()

bench::mark(
  h3o = sfc_to_cells(nc, 5, "centroid"),
  h3jsr = h3jsr::polygon_to_cells(nc, 5),
  check = FALSE,
  relative = TRUE
)
```

### Converting points to cells

```{r}
bench::mark(
  h3o = h3_from_points(pnts$geometry, 3),
  h3jsr = h3jsr::point_to_cell(pnts$geometry, 3),
  check = FALSE,
  relative = TRUE
)
```

### Retrieve edges

```{r}
bench::mark(
  h3o = h3_edges(h3s),
  h3jsr = h3jsr::get_udedges(h3_strs),
  check = FALSE,
  relative = TRUE
)
```

### Get origins and destinations from edges.

```{r}
# get edges for a single location
eds <- h3_edges(h3s[1])[[1]]
# strings for h3jsr
eds_str <- as.character(eds)

bench::mark(
  h3o = h3_edge_cells(eds),
  h3jsr = h3jsr::get_udends(eds_str),
  check = FALSE,
  relative = TRUE
)
```

## Installation üì¶

You can install the release version of `h3o` from CRAN with:

``` r
install.packages("h3o")
```

Or you can install the development version from [GitHub](https://github.com/)
with:

``` r
# install.packages("pak")
pak::pak("extendr/h3o")
```

## Learn more üßë‚Äçüéì

See the package documentation for more details: <http://extendr.rs/h3o/>. 

If you encounter a bug or would like to request new features, head over to the 
GitHub repository: <https://github.com/extendr/h3o>.