<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>extendr</title>
<link>https://extendr.github.io/blog/</link>
<atom:link href="https://extendr.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Tue, 09 Sep 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>h3o is now on CRAN‚ÄºÔ∏è</title>
  <dc:creator>Blake Vernon</dc:creator>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://extendr.github.io/blog/posts/2025-09-09-h3o-on-cran/</link>
  <description><![CDATA[ 




<p><img src="https://extendr.github.io/blog/posts/2025-09-09-h3o-on-cran/thumbnail.png" class="img-fluid"></p>
<p>The extendr-powered R package <code>h3o</code> provides access to <a href="https://github.com/HydroniumLabs/h3o">a pure Rust implementation</a> of <a href="https://github.com/uber/h3">Uber‚Äôs H3 Geospatial Indexing System</a>. Originally developed by Josiah Parry, the R package has also become an official product of extendr, which means community support ü§ù and maintenance üèóÔ∏è into the foreseeable future.</p>
<section id="h3o-at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="h3o-at-a-glance"><code>h3o</code> at a glance üëÄ</h2>
<p>The package provides functionality to interact with H3‚Äôs grid as vectors, which can be converted to and from <code>sf</code> geometries.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(h3o)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-5"></span>
<span id="cb1-6">xy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11">pnts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sf</span>(</span>
<span id="cb1-12">  xy,</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coords =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb1-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">crs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span></span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(pnts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_from_points</span>(geometry, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 100 features and 1 field
Geometry type: POINT
Dimension:     XY
Bounding box:  xmin: -4.861231 ymin: 40.05397 xmax: 9.846006 ymax: 49.98446
Geodetic CRS:  WGS 84
First 10 features:
                     geometry              h3
1   POINT (3.169478 45.06344) 851f92d7fffffff
2    POINT (5.63995 44.91631) 851f9323fffffff
3   POINT (1.263684 42.55526) 85396207fffffff
4  POINT (0.3876174 41.06653) 853973b3fffffff
5  POINT (-1.192501 44.22128) 85184d7bfffffff
6    POINT (3.86172 41.56535) 8539419bfffffff
7  POINT (-1.565639 49.98446) 851866bbfffffff
8   POINT (3.704704 42.74759) 85396e47fffffff
9    POINT (2.804652 47.0575) 851fb267fffffff
10 POINT (-4.021278 47.52185) 851846affffffff</code></pre>
</div>
</div>
<p>You can use the <code>st_as_sfc()</code> method to convert H3 hexagons to sf <code>POLYGON</code>s.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace geometry</span></span>
<span id="cb3-2">h3_cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pnts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_from_points</span>(geometry, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geometry =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sfc</span>(h3)</span>
<span id="cb3-6">  )</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the hexagons</span></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_geometry</span>(h3_cells))</span></code></pre></div></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://extendr.github.io/blog/posts/2025-09-09-h3o-on-cran/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>H3 cell centroids can be returned using <code>h3_to_points()</code>. If <code>sf</code> is avilable, the results will be returned as an <code>sfc</code> (sf column) object. Otherwise it will return a list of <code>sfg</code> (sf geometries).</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fetch h3 column</span></span>
<span id="cb4-2">h3s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> h3_cells[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h3"</span>]]</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get there centers</span></span>
<span id="cb4-5">h3_centers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_to_points</span>(h3s)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the hexagons with the centers</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_geometry</span>(h3_cells))</span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(h3_centers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span></code></pre></div></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://extendr.github.io/blog/posts/2025-09-09-h3o-on-cran/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="h3-at-light-speed" class="level2">
<h2 class="anchored" data-anchor-id="h3-at-light-speed">H3 at light speed ‚ö°</h2>
<p>Because it builds on a pure Rust implementation, <code>h3o</code> is also very very fast. Here are some benchmarks, which also serve to showcase <code>h3o</code> tools.</p>
<section id="creating-polygons" class="level3">
<h3 class="anchored" data-anchor-id="creating-polygons">Creating polygons</h3>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">h3_strs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(h3s)</span>
<span id="cb5-2">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3o =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_as_sfc</span>(h3s),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3jsr =</span> h3jsr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cell_to_polygon</span>(h3_strs),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relative =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-6">)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression   min median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 h3o          1      1        26.1        1      1   
2 h3jsr       27.0   25.6       1        268.     3.85</code></pre>
</div>
</div>
</section>
<section id="converting-polygons-to-h3-cells" class="level3">
<h3 class="anchored" data-anchor-id="converting-polygons-to-h3-cells">Converting polygons to H3 cells:</h3>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_read</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpkg/nc.gpkg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sf"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_transform</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4326</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_geometry</span>()</span>
<span id="cb7-4"></span>
<span id="cb7-5">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3o =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sfc_to_cells</span>(nc, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"centroid"</span>),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3jsr =</span> h3jsr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_to_cells</span>(nc, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb7-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb7-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relative =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb7-10">)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression   min median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 h3o         1      1         7.79       1       5.84
2 h3jsr       8.96   7.82      1         33.0     1   </code></pre>
</div>
</div>
</section>
<section id="converting-points-to-cells" class="level3">
<h3 class="anchored" data-anchor-id="converting-points-to-cells">Converting points to cells</h3>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3o =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_from_points</span>(pnts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>geometry, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3jsr =</span> h3jsr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">point_to_cell</span>(pnts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>geometry, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relative =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb9-6">)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression   min median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 h3o          1      1        16.8        1      1.02
2 h3jsr       16.7   19.4       1       1193.     1   </code></pre>
</div>
</div>
</section>
<section id="retrieve-edges" class="level3">
<h3 class="anchored" data-anchor-id="retrieve-edges">Retrieve edges</h3>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3o =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_edges</span>(h3s),</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3jsr =</span> h3jsr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_udedges</span>(h3_strs),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relative =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-6">)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression   min median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 h3o         1      1         2.95      1        1   
2 h3jsr       2.97   2.83      1         7.02     2.65</code></pre>
</div>
</div>
</section>
<section id="get-origins-and-destinations-from-edges." class="level3">
<h3 class="anchored" data-anchor-id="get-origins-and-destinations-from-edges.">Get origins and destinations from edges.</h3>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get edges for a single location</span></span>
<span id="cb13-2">eds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_edges</span>(h3s[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># strings for h3jsr</span></span>
<span id="cb13-4">eds_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(eds)</span>
<span id="cb13-5"></span>
<span id="cb13-6">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(</span>
<span id="cb13-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3o =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h3_edge_cells</span>(eds),</span>
<span id="cb13-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h3jsr =</span> h3jsr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_udends</span>(eds_str),</span>
<span id="cb13-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb13-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relative =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb13-11">)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 6
  expression   min median `itr/sec` mem_alloc `gc/sec`
  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 h3o          1      1        24.6      1        1   
2 h3jsr       21.3   26.1       1        2.52     3.01</code></pre>
</div>
</div>
</section>
</section>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation üì¶</h2>
<p>You can install the release version of <code>h3o</code> from CRAN with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h3o"</span>)</span></code></pre></div></div>
<p>Or you can install the development version from <a href="https://github.com/">GitHub</a> with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("pak")</span></span>
<span id="cb16-2">pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pak</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extendr/h3o"</span>)</span></code></pre></div></div>
</section>
<section id="learn-more" class="level2">
<h2 class="anchored" data-anchor-id="learn-more">Learn more üßë‚Äçüéì</h2>
<p>See the package documentation for more details: <a href="http://extendr.rs/h3o/" class="uri">http://extendr.rs/h3o/</a>.</p>
<p>If you encounter a bug or would like to request new features, head over to the GitHub repository: <a href="https://github.com/extendr/h3o" class="uri">https://github.com/extendr/h3o</a>.</p>


</section>

 ]]></description>
  <category>Release</category>
  <guid>https://extendr.github.io/blog/posts/2025-09-09-h3o-on-cran/</guid>
  <pubDate>Tue, 09 Sep 2025 00:00:00 GMT</pubDate>
  <media:content url="https://extendr.github.io/blog/posts/2025-09-09-h3o-on-cran/thumbnail.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>rextendr 0.4</title>
  <dc:creator>Blake Vernon</dc:creator>
  <link>https://extendr.github.io/blog/posts/2025-08-26-rextendr-release-040/</link>
  <description><![CDATA[ 




<section id="tl-dr" class="level2">
<h2 class="anchored" data-anchor-id="tl-dr">TL; DR</h2>
<ul>
<li>New domain! Say hi to extendr.rs üëãüèº</li>
<li>Positron &amp; VS Code Support üë©üèΩ‚Äçüíª</li>
<li>CRAN compatibility out of the box</li>
<li>WebR support üï∏Ô∏è</li>
</ul>
<p>The extendr team is excited to announce the release of <a href="https://extendr.github.io/rextendr/dev">rextendr</a> <code>0.4</code>, along with two follow-up patch releases, that bring significant improvements to the R package ecosystem for Rust integration. These include:</p>
<ul>
<li>enhanced CRAN compatibility,</li>
<li>improved developer experience,</li>
<li>WebR support,</li>
<li>and streamlined package scaffolding.</li>
</ul>
<p>A great deal of work also went into re-factoring code to reduce package dependencies and improve the maintainability to ensure the long-term viability of the project.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>What is rextendr?
</div>
</div>
<div class="callout-body-container callout-body">
<p>For those new to the project, rextendr is an R package similar to <code>usethis</code> and <code>devtools</code> for supporting development of Rust-powered R packages, with the Rust crate <code>extendr</code> handling most of the heavy lifting behind the scenes.</p>
</div>
</div>
</section>
<section id="webr" class="level2">
<h2 class="anchored" data-anchor-id="webr">WebR support</h2>
<p>A very exciting development in this release is <strong>WebR compatibility out of the box</strong>. All extendr-powered R packages are now compatible with <a href="https://webr.r-wasm.org/latest/">WebR</a>, meaning your packages can run in the browser without an R installation.</p>
<p>WebR support happens without any additional work on your part. Just update your build files with <code>use_extendr()</code> and permit rextendr to update your <code>Makevars{.win}.in</code>, files in <code>tools/</code>, <code>configure</code> scripts.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>WebR for existing packages
</div>
</div>
<div class="callout-body-container callout-body">
<p>WebR support requires that <code>lto = true</code> in your release profile. This is handled for new packages, but not existing ones. Be sure to add it to your <code>Cargo.toml</code>.</p>
</div>
</div>
</section>
<section id="cran" class="level2">
<h2 class="anchored" data-anchor-id="cran">CRAN compatibility</h2>
<p>The standout feature of the current release is found in rextendr‚Äôs workhorse function <code>use_extendr()</code>, which now provides <strong>CRAN-ready scaffolding out of the box</strong>. All you need to do is vendor your Rust dependencies with <code>vendor_pkgs()</code> and you‚Äôre ready for CRAN submission.</p>
</section>
<section id="positron" class="level2">
<h2 class="anchored" data-anchor-id="positron">Positron &amp; VS Code Support</h2>
<p>With <a href="http://positron.posit.co/">Positron</a> coming out of beta, we‚Äôve introduced <code>use_positron()</code> and <code>use_vscode()</code> to generate (or update) <code>.vscode/settings.json</code> tailored to Rust development in R packages.</p>
<p>When you run <code>use_extendr()</code>, it now automatically calls <code>use_vscode()</code> when VS Code or Positron is detected as your IDE, making the setup completely seamless.</p>
</section>
<section id="enhanced-developer-tools" class="level2">
<h2 class="anchored" data-anchor-id="enhanced-developer-tools">Enhanced Developer Tools</h2>
<p>Release of 0.4.0 and its patches also comes with additional developer tooling:</p>
<ul>
<li><strong>Rust diagnostics</strong>‚Äî<code>rust_sitrep()</code> provides comprehensive Rust toolchain diagnostics and guides you through fixing any installation issues</li>
<li><strong>Dependency management</strong>‚Äî<code>use_crate()</code> makes adding Rust dependencies to your <code>Cargo.toml</code> as easy as <code>usethis::use_package()</code></li>
<li><strong>MSRV support</strong>‚Äî<code>use_msrv()</code> helps specify the minimum supported Rust version for your package</li>
<li><strong>Metadata access</strong>‚Äî<code>read_cargo_metadata()</code> lets you fetch detailed project information from Cargo</li>
<li><strong>Eeasy dependency vendoring</strong>‚Äî<code>vendor_pkgs()</code> vendors and compresses your Rust dependencies for easy CRAN publication and offline installation</li>
</ul>
</section>
<section id="badge" class="level2">
<h2 class="anchored" data-anchor-id="badge">A new extendr badge!</h2>
<p>The extendr community has grown quite a bit in the last two years, maybe as much as the codebase! First of all, we want to say <strong>thank you</strong> for being a part of the community!</p>
<p>We wanted to make sure that new developers could boast about their extendr-powered packages‚Äîand, if we‚Äôre being honest, increase visibility for the project‚Äîby adding an extendr badge to their README files, which can now be done with <code>use_extendr_badge()</code>. This results in:</p>
<p><a href="https://extendr.rs/extendr/extendr_api/"><img src="https://img.shields.io/badge/extendr-%5E0.8.0-276DC2" class="img-fluid"></a></p>
<p>If you‚Äôre using extendr in your package, do us a solid and add the badge to your README! ü•∫</p>
</section>
<section id="theres-still-more" class="level2">
<h2 class="anchored" data-anchor-id="theres-still-more">There‚Äôs still more</h2>
<p>Check out our recently updated <a href="https://extendr.rs/">website</a> and documentation! For the full changelog see the <a href="https://github.com/extendr/rextendr/blob/main/NEWS.md">NEWS.md</a>.</p>


</section>

 ]]></description>
  <category>Release</category>
  <category>Updates</category>
  <guid>https://extendr.github.io/blog/posts/2025-08-26-rextendr-release-040/</guid>
  <pubDate>Tue, 26 Aug 2025 00:00:00 GMT</pubDate>
  <media:content url="https://extendr.github.io/blog/posts/2025-08-26-rextendr-release-040/images/rextendr-release-040.png" medium="image" type="image/png" height="92" width="144"/>
</item>
<item>
  <title>Migration guide for extendr 0.7.0</title>
  <dc:creator>Josiah Parry</dc:creator>
  <link>https://extendr.github.io/blog/posts/2024-06-30-extendr-release-070/</link>
  <description><![CDATA[ 




<p>The <code>0.7.0</code> version of extendr has just been released. This release has focused on cleaning up the API and ensuring that design decisions are safer and more idiomatic rust. To this end, there are a few breaking changes that will need to be addressed. When migrating, the Rust compiler might <em>look</em> like a red mess of error, but I can assure you, it isn‚Äôt so bad!</p>
<section id="removal-of-fromrobj" class="level2">
<h2 class="anchored" data-anchor-id="removal-of-fromrobj">Removal of <code>FromRobj</code></h2>
<p>The <code>FromRobj</code> trait provided the method <code>from_robj()</code> method which allowed you to fallibly convert from one struct to another.</p>
<p>This trait has been removed in favor of the standard library <code>TryFrom</code> trait.</p>
<p>For example the following function definition adapted from <code>{rsgeo}</code> is no longer valid.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> signed_area(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">f64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&amp;</span>Geom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span>from_robj(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>xi)</span>
<span id="cb1-3">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb1-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>geom</span>
<span id="cb1-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signed_area()</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>Instead, replace the <code>from_robj()</code> with <code>try_from()</code>.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> signed_area(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">f64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&amp;</span>Geom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span>try_from(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>xi)</span>
<span id="cb2-3">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb2-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>geom</span>
<span id="cb2-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>signed_area()</span>
<span id="cb2-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="removal-of-extendruse_try_from-true" class="level2">
<h2 class="anchored" data-anchor-id="removal-of-extendruse_try_from-true">Removal of <code>#[extendr(use_try_from = true)]</code></h2>
<p>Because <code>TryFrom</code> is the default now, the macro argument <code>use_try_from = true</code> will cause a compiler error. For example this</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>extendr<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span>use_try_from <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">)]</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> wkb_to_geoms(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">    x</span>
<span id="cb3-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_iter()</span>
<span id="cb3-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>map(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>(_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> wkb_to_geom(raw_to_vecu8(x)))</span>
<span id="cb3-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">collect::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>()</span>
<span id="cb3-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_robj()</span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>becomes</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#[</span>extendr<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> wkb_to_geoms(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-3">    x</span>
<span id="cb4-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_iter()</span>
<span id="cb4-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>map(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>(_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> wkb_to_geom(raw_to_vecu8(x)))</span>
<span id="cb4-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">collect::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>List<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>()</span>
<span id="cb4-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_robj()</span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="setting-attributes" class="level2">
<h2 class="anchored" data-anchor-id="setting-attributes">Setting <code>Attributes</code></h2>
<p>Prior to version <code>0.7.0</code> the <code>Attributes</code> trait did two undesirable things:</p>
<ol type="1">
<li>any time you added an attribute, the result was an <code>Robj</code></li>
<li>adding an attribute did not require a mutable reference</li>
</ol>
<p>The first was problematic because you lose the struct type when setting an attribute. The second was problematic because <code>Attributes::set_attrib()</code> method modified the underlying <code>SEXP</code> in place <em>without</em> requiring a mutable reference giving you an unsafe guarantee that the original <code>SEXP</code> would not be modified.</p>
<p>For example migrating from to 0.7.0 in the package <a href="https://cran.r-project.org/package=arcgisplaces"><code>{arcgisplaces}</code></a> results in the compiler error:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb5-1">error[E0308]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> mismatched types</span>
<span id="cb5-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>rs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span></span>
<span id="cb5-3">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb5-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> location_to_sfg(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>                                               <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">----</span> expected `<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">extendr_api::</span>Robj` because of <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">type</span></span>
<span id="cb5-6">...</span>
<span id="cb5-7">15 | /             Doubles::from_values([x, y])</span>
<span id="cb5-8">16 | |                 .into_robj()</span>
<span id="cb5-9">17 | |                 .set_class(&amp;["XY", "POINT", "sfg"])</span>
<span id="cb5-10">18 | |                 .unwrap()</span>
<span id="cb5-11">   | |_________________________^ expected `Robj`, found `&amp;mut Robj`</span>
<span id="cb5-12"></span>
<span id="cb5-13">error[E0308]: mismatched types</span></code></pre></div></div>
<p>A simplified version of the function looks like:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> location_to_sfg(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> Point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Doubles::</span>from_values([x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y])</span>
<span id="cb6-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>set_class(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XY"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POINT"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sfg"</span>])</span>
<span id="cb6-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>This function previously returned an <code>Robj</code> because that was the type returned by <code>set_class()</code>. This function can be rewritten as</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> location_to_sfg2(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Robj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> Point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Doubles::</span>from_values([x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y])</span>
<span id="cb7-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>set_class(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XY"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POINT"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sfg"</span>])</span>
<span id="cb7-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb7-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>clone()</span>
<span id="cb7-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into_robj()</span>
<span id="cb7-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p><code>.set_class()</code> returns a <code>&amp;mut Doubles</code> we can clone the <code>Doubles</code> the result so that we have a non-mutable reference. Note that <strong>cloning only increases a reference counter</strong> and is not costly. Here <code>.into_robj()</code> is used to return an <code>Robj</code></p>
<p>Alternatively, the function can now return <code>Doubles</code> instead if you so desire:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode rs code-with-copy"><code class="sourceCode rust"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> location_to_sfg(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Option</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Doubles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> Point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Doubles::</span>from_values([x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y])</span>
<span id="cb8-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>set_class(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XY"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POINT"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sfg"</span>])</span>
<span id="cb8-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap()</span>
<span id="cb8-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>clone()</span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="r-devel-non-api-changes" class="level2">
<h2 class="anchored" data-anchor-id="r-devel-non-api-changes">R-devel Non-API changes</h2>
<p>R-devel is currently in the process of formalizing what is and is not part of the official C-API. As a result extendr powered R packages have WARN-ings due to non-API usage.</p>
<p>extendr 0.7.0 hides these behind a feature flag <code>non-api</code>. Unfortunately, due to the 1.69 minimum supported Rust version (MSRV) of CRAN combined with the lack of an MSRV in bindgen (which is used to generate R bindings), the non-api features cannot be provided automatically and require custom generation of R bindings via <code>libR-sys</code>.</p>
<p>This will affect you if you are using the <code>global_var()</code>, <code>local_var()</code>, <code>base_env()</code>, various <code>Environment</code>, <code>Function</code>, <code>Primitive</code>, and <code>Promise</code> methods.</p>
<p>If you are affected by this, <a href="https://github.com/extendr/extendr/issues">please create an issue</a> and we can work through it together.</p>


</section>

 ]]></description>
  <category>Release</category>
  <category>Updates</category>
  <guid>https://extendr.github.io/blog/posts/2024-06-30-extendr-release-070/</guid>
  <pubDate>Sun, 30 Jun 2024 00:00:00 GMT</pubDate>
  <media:content url="https://extendr.github.io/blog/posts/2024-06-30-extendr-release-070/images/extendr-release-070.png" medium="image" type="image/png" height="81" width="144"/>
</item>
</channel>
</rss>
